#
# Make.targets for GENIE/Comparisons
#

#
#
PACKAGE_LIB                   = $(LIBNAME)$(GLIBVERSION).$(DllSuf)
PACKAGE_LIB_WITH_PATH         = $(E4NUANALYSIS_LIB_PATH)/$(LIBNAME)$(GLIBVERSION).$(DllSuf)
PACKAGE_LIBNOVRS_WITH_PATH    = $(E4NUANALYSIS_LIB_PATH)/$(LIBNAME).$(DllSuf)
PACKAGE_LIBMACLINK_WITH_PATH  = $(E4NUANALYSIS_LIB_PATH)/$(LIBNAME).$(DllLinkSuf)
PACKAGE_LIBNOVRS_WITH_IPATH   = $(E4NUANALYSIS_LIB_INSTALLATION_PATH)/$(LIBNAME).$(DllSuf)
PACKAGE_LIBMACLINK_WITH_IPATH = $(E4NUANALYSIS_LIB_INSTALLATION_PATH)/$(LIBNAME).$(DllLinkSuf)

PACKAGE_ALL_SOURCES          := $(wildcard *.cxx )
DICTGEN_HEADERS              := $(addsuffix .h, $(basename $(PACKAGE_ALL_SOURCES)))
DICTGEN_OBJECTS              := $(addsuffix .$(ObjSuf), $(basename $(DICTGEN_HEADERS)))
PACKAGE_ALL_SOURCES          := $(PACKAGE_ALL_SOURCES) $(DICTIONARY).cc $(wildcard *.cpp)
PACKAGE_ALL_OBJECTS           = $(addsuffix .$(ObjSuf), $(basename $(PACKAGE_ALL_SOURCES)))
PACKAGE_SOURCES              := $(wildcard *.cxx)
PACKAGE_OBJECTS               = $(addsuffix .$(ObjSuf), $(basename $(PACKAGE_SOURCES)))

PACKAGE_PCM               := _ROOT_DICT_$(PACKAGE)_rdict.pcm
PACKAGE_PCM_WITH_PATH     := $(E4NUANALYSIS_LIB_PATH)/$(PACKAGE_PCM)
PACKAGE_ROOTMAP           :=  _ROOT_DICT_$(PACKAGE).rootmap
PACKAGE_ROOTMAP_WITH_PATH := $(E4NUANALYSIS_LIB_PATH)/$(PACKAGE_ROOTMAP)

LIB_DEPEND=
ifeq ($(strip $(DICTIONARY)),undefined)
  LIB_DEPEND = $(PACKAGE_OBJECTS) 
else
  LIB_DEPEND = $(PACKAGE_ALL_OBJECTS)
endif

rootcint: $(DICTIONARY).o

$(DICTIONARY).cc: LinkDef.h $(DICTGEN_OBJECTS)
		  $(RM) $(DICTIONARY).*
		  @echo "[package: $(PACKAGE)] Generating ROOT dictionary ..."
		  rootcint -f $(DICTIONARY).cc -c $(ROOT_DICT_GEN_INCLUDES) $(DICTGEN_HEADERS) LinkDef.h

#
#

lib: $(LIB_DEPEND)
     @echo "[package: $(PACKAGE)] Generating shared library ..."
ifeq ($(strip $(DICTIONARY)),undefined)
     $(SOCMD) $(SOFLAGS) $(SOMINF) $(PACKAGE_OBJECTS) $(EXTRA_EXT_LIBS) $(OutPutOpt) $(PACKAGE_LIB_WITH_PATH)
else
	$(SOCMD) $(SOFLAGS) $(SOMINF) $(PACKAGE_ALL_OBJECTS) $(EXTRA_EXT_LIBS) $(OutPutOpt) $(PACKAGE_LIB_WITH_PATH)
	[ ! -f $(PACKAGE_PCM) ] || $(COPY) $(PACKAGE_PCM) $(E4NUANALYSIS_LIB_PATH)
	[ ! -f $(PACKAGE_ROOTMAP) ] || $(COPY) $(PACKAGE_ROOTMAP) $(E4NUANALYSIS_LIB_PATH)
endif

#
#
lib-link: FORCE
	  @echo "[package: $(PACKAGE)] Creating symbolic link to shared library ..."
ifeq ($(strip $(GOPT_ENABLE_DYLIBVERSION)),YES)
     $(SYMLINK) $(PACKAGE_LIB) $(PACKAGE_LIBNOVRS_WITH_PATH)
endif
ifeq ($(strip $(IS_MACOSX)),YES)
     $(SYMLINK) $(PACKAGE_LIB) $(PACKAGE_LIBMACLINK_WITH_PATH)
endif


#
#
install-lib: FORCE
	     @echo "[package: $(PACKAGE)] Installing library..."
	     [ ! -f $(PACKAGE_LIB_WITH_PATH) ] || $(COPY) $(PACKAGE_LIB_WITH_PATH) $(E4NUANALYSIS_LIB_INSTALLATION_PATH)
ifeq ($(strip $(GOPT_ENABLE_DYLIBVERSION)),YES)
     [ ! -f $(PACKAGE_LIB_WITH_PATH) ] || $(SYMLINK) $(PACKAGE_LIB) $(PACKAGE_LIBNOVRS_WITH_IPATH)
endif
ifeq ($(strip $(ARCH)),macosx)
     [ ! -f $(PACKAGE_LIB_WITH_PATH) ] || $(SYMLINK) $(PACKAGE_LIB) $(PACKAGE_LIBMACLINK_WITH_IPATH)
endif

#
#
install-inc: FORCE
	     @echo "[package: $(PACKAGE)] Installing headers..."
	     $(COPY) *.h $(E4NUANALYSIS_INC_INSTALLATION_PATH)/$(subst ${E4NUANALYSIS}/src/,,$(shell pwd))

#
#
purge: FORCE
#       $(RM) $(PACKAGE_OBJECTS) *~ core a.out Makefile.temp
 

#
#
clean: FORCE   
#       $(RM) *.o *.d *~ core a.out $(E4NUANALYSIS_LIB_PATH)/$(LIBNAME)* $(DICTIONARY)* Makefile.temp


#
#
distclean: FORCE
#	   $(RM) $(E4NUANALYSIS_LIB_INSTALLATION_PATH)/$(LIBNAME)*
